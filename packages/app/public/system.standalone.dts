/**
 * 合并所有类型依赖的完整声明文件
 * 包含 Zod、Playwright 和系统核心类型定义
 */

// === Zod 相关类型定义 ===
/**
 * Zod 类型验证库的核心命名空间
 * 提供运行时类型验证和 TypeScript 类型推断
 */
declare namespace z {
   /**
    * Zod 类型系统的基础接口
    * 定义所有 Zod 类型的通用结构
    */
   interface ZodType<
      Output = any,
      Def extends ZodTypeDef = ZodTypeDef,
      Input = Output
   > {
      _type: Output;
      _output: Output;
      _input: Input;
      _def: Def;
   }

   /**
    * Zod 类型定义的基础接口
    * 包含类型名称标识符
    */
   interface ZodTypeDef {
      typeName: ZodFirstPartyTypeKind;
   }

   /**
    * Zod 内置类型的枚举
    * 定义所有支持的数据类型
    */
   /**
    * Zod 内置类型的枚举
    * 定义所有支持的数据类型
    */
   enum ZodFirstPartyTypeKind {
      ZodString = 'ZodString',
      ZodNumber = 'ZodNumber',
      ZodBoolean = 'ZodBoolean',
      ZodObject = 'ZodObject',
      ZodArray = 'ZodArray',
      ZodLiteral = 'ZodLiteral',
      ZodOptional = 'ZodOptional',
      ZodCustom = 'ZodCustom',
      ZodDiscriminatedUnion = 'ZodDiscriminatedUnion',
   }

   /**
    * 字面量类型接口
    * 用于验证具体的字符串值
    */
   interface ZodLiteral<T extends string> extends ZodType<T> {
      _def: {
         typeName: ZodFirstPartyTypeKind.ZodLiteral;
         value: T;
      };
   }

   /**
    * 字符串类型接口
    * 用于验证字符串类型的值
    */
   interface ZodString extends ZodType<string> {
      _def: {
         typeName: ZodFirstPartyTypeKind.ZodString;
      };
   }

   /**
    * 可选类型接口
    * 将其他类型包装为可选（可以是 undefined）
    */
   interface ZodOptional<T extends ZodType>
      extends ZodType<T['_output'] | undefined> {
      _def: {
         typeName: ZodFirstPartyTypeKind.ZodOptional;
         innerType: T;
      };
   }

   /**
    * 自定义类型接口
    * 用于定义自定义验证逻辑
    */
   interface ZodCustom<T, Input = T> extends ZodType<T, any, Input> {
      _def: {
         typeName: ZodFirstPartyTypeKind.ZodCustom;
      };
   }

   /**
    * 对象类型接口
    * 用于验证对象结构和属性
    */
   interface ZodObject<
      T extends Record<string, ZodType>,
      UnknownKeys extends 'passthrough' | 'strict' | 'strip' = 'strip',
      Catchall extends ZodType = ZodType
   > extends ZodType<{
         [K in keyof T]: T[K]['_output'];
      }> {
      _def: {
         typeName: ZodFirstPartyTypeKind.ZodObject;
         shape: () => T;
         unknownKeys: UnknownKeys;
         catchall: Catchall;
      };
   }

   /**
    * 联合类型接口
    * 基于判别字段进行类型区分的联合类型
    */
   interface ZodDiscriminatedUnion<T extends readonly ZodType[]>
      extends ZodType<T[number]['_output']> {
      _def: {
         typeName: ZodFirstPartyTypeKind.ZodDiscriminatedUnion;
         options: T;
      };
   }

   /**
    * Zod 核心命名空间
    * 包含内部使用的类型定义
    */
   namespace core {
      type $strip = 'strip';
   }

   /**
    * 类型推断工具
    * 从 Zod 类型定义中推断出 TypeScript 类型
    */
   type infer<T extends ZodType> = T['_output'];
}

/**
 * Playwright 元素句柄接口
 */
declare type ElementHandle = {
   /** 获取元素文本内容 */
   textContent(): Promise<string | null>;
   /** 获取元素属性 */
   getAttribute(name: string): Promise<string | null>;
   click(options?: ClickOptions): Promise<void>;
   fill(value: string, options?: FillOptions): Promise<void>;
   type(text: string, options?: TypeOptions): Promise<void>;
   hover(options?: HoverOptions): Promise<void>;
   isVisible(): Promise<boolean>;
   isEnabled(): Promise<boolean>;
   /** 获取包围盒*/
   boundingBox(options?: { timeout?: number }): Promise<null | { 
      x: number;
      y: number;
      width: number;
      height: number; 
   }>
};

/**
 * 定位器接口
 */
declare type Locator = {
   /** 获取元素文本内容 */
   textContent(): Promise<string | null>;
   /** 获取元素属性 */
   getAttribute(name: string): Promise<string | null>;
   /** 获取元素样式 */
   getComputedStyle(): Promise<CSSStyleDeclaration | null>;
   /** 点击元素 */
   click(options?: ClickOptions): Promise<void>;
   /** 填充表单字段 */
   fill(value: string, options?: FillOptions): Promise<void>;
   /** 在元素中输入文本 */
   type(text: string, options?: TypeOptions): Promise<void>;
   /** 悬停在元素上 */
   hover(options?: HoverOptions): Promise<void>;
   /** 等待元素出现 */
   waitFor(options?: {
      state?: 'attached' | 'detached' | 'visible' | 'hidden';
      timeout?: number;
   }): Promise<void>;
   /** 检查元素是否可见 */
   isVisible(): Promise<boolean>;
   /** 检查元素是否启用 */
   isEnabled(): Promise<boolean>;
   /** 获取所有匹配的元素 */
   all(): Promise<Locator[]>;
   /** 获取第一个匹配的元素 */
   first(): Locator;
   /** 获取最后一个匹配的元素 */
   last(): Locator;
   /** 根据索引获取元素 */
   nth(index: number): Locator;
   /** 获取包围盒*/
   boundingBox(options?: { timeout?: number }): Promise<null | { 
      x: number;
      y: number;
      width: number;
      height: number; 
   }>
};

declare type ClickOptions = {
   button?: 'left' | 'right' | 'middle';
   delay?: number;
   force?: boolean;
   position?: { x: number; y: number };
   timeout?: number;
   clickCount?: number;
};

// === Playwright Page 相关类型定义 ===
/**
 * Playwright 页面对象接口
 * 提供浏览器页面操作的完整 API
 */
declare type Page = {
   /** 获取页面元素 */
   $: (selector: string) => Promise<ElementHandle>;
   /** 获取多个页面元素 */
   $$: (selector: string) => Promise<ElementHandle[]>;
   /** 获取页面元素文本内容 */
   textContent(selector: string): Promise<string | null>;
   /** 获取页面元素属性 */
   getAttribute(selector: string, name: string): Promise<string | null>;
   /** 获取页面元素样式 */
   getComputedStyle(selector: string): Promise<CSSStyleDeclaration | null>;
   /** 点击指定元素 */
   click(selector: string, options?: ClickOptions): Promise<void>;
   /** 填充表单字段 */
   fill(
      selector: string,
      value: string,
      options?: { force?: boolean; timeout?: number }
   ): Promise<void>;
   /** 悬停指定元素 */
   hover(
      selector: string,
      options?: {
         force?: boolean;
         position?: { x: number; y: number };
         timeout?: number;
      }
   ): Promise<void>;
   /** 在元素中输入文本 */
   type(
      selector: string,
      text: string,
      options?: { delay?: number; timeout?: number }
   ): Promise<void>;
   /** 等待元素出现 */
   waitForSelector(
      selector: string,
      options?: { timeout?: number }
   ): Promise<any>;
   /** 等待指定时间 */
   waitForTimeout(timeout: number): Promise<void>;
   /** 截取页面截图 */
   screenshot(options?: { path?: string; fullPage?: boolean }): Promise<Buffer>;
   /** 在页面上下文中执行 JavaScript */
   evaluate<R>(pageFunction: () => R): Promise<R>;
   /** 在页面上下文中执行带参数的 JavaScript */
   evaluate<R, T>(pageFunction: (arg: T) => R, arg: T): Promise<R>;
   /** 创建元素定位器 */
   locator(selector: string): Locator;
   /** 获取当前页面 URL */
   url(): string;
   /** 获取页面标题 */
   title(): string;
   /** 获取页面 HTML 内容 */
   content(): Promise<string>;
   /** 关闭页面 */
   close(): Promise<void>;
   /** 重新加载页面 */
   reload(options?: {
      waitUntil?: 'load' | 'domcontentloaded' | 'networkidle';
      timeout?: number;
   }): Promise<any>;
   /** 返回上一页 */
   goBack(options?: {
      waitUntil?: 'load' | 'domcontentloaded' | 'networkidle';
      timeout?: number;
   }): Promise<any>;
   /** 前进到下一页 */
   goForward(options?: {
      waitUntil?: 'load' | 'domcontentloaded' | 'networkidle';
      timeout?: number;
   }): Promise<any>;
   /** 设置视口大小 */
   setViewportSize(size: { width: number; height: number }): Promise<void>;
   /** 获取视口大小 */
   viewportSize(): { width: number; height: number } | null;
   /** 鼠标操作对象 */
   mouse: {
      /** 移动鼠标到指定位置 */
      move(
         x: number,
         y: number,
         options?: { steps?: number; timeout?: number }
      ): Promise<void>;
      /** 点击鼠标左键 */
      click(
         x: number,
         y: number,
         options?: {
            button?: 'left' | 'right' | 'middle';
            delay?: number;
            force?: boolean;
            position?: { x: number; y: number };
            timeout?: number;
         }
      ): Promise<void>;
      /** 双击鼠标左键 */
      dblclick(
         x: number,
         y: number,
         options?: {
            button?: 'left' | 'right' | 'middle';
            delay?: number;
            force?: boolean;
            position?: { x: number; y: number };
            timeout?: number;
         }
      ): Promise<void>;
      /** 右键点击 */
      rightClick(
         x: number,
         y: number,
         options?: {
            delay?: number;
            force?: boolean;
            position?: { x: number; y: number };
            timeout?: number;
         }
      ): Promise<void>;
      /** 拖动鼠标 */
      dragAndDrop(
         source: string,
         target: string,
         options?: { timeout?: number }
      ): Promise<void>;
      /** 滚动鼠标 */
      wheel(
         deltaX: number,
         deltaY: number,
         options?: { timeout?: number }
      ): Promise<void>;
   };
   /** 键盘操作对象 */
   keyboard: {
      /** 按下指定键 */
      press(
         key: string,
         options?: { delay?: number; timeout?: number }
      ): Promise<void>;
      /** 输入文本 */
      type(
         text: string,
         options?: { delay?: number; timeout?: number }
      ): Promise<void>;
      /** 模拟键盘按下和释放 */
      down(
         key: string,
         options?: { delay?: number; timeout?: number }
      ): Promise<void>;
      /** 模拟键盘释放 */
      up(
         key: string,
         options?: { delay?: number; timeout?: number }
      ): Promise<void>;
   };
   /** 暴露函数到页面 */
   exposeFunction(name: string, callback: Function): Promise<void>;
   /** 设置路由拦截 */
   route(url: string | RegExp, handler: Function): Promise<void>;
   /** 取消路由拦截 */
   unroute(url: string | RegExp, handler?: Function): Promise<void>;
   /** 等待事件触发 */
   waitForEvent(event: string, options?: { timeout?: number }): Promise<any>;
   /** 等待函数返回真值 */
   waitForFunction(
      pageFunction: Function,
      arg?: any,
      options?: {
         timeout?: number;
         polling?: 'raf' | 'mutation' | number;
         force?: boolean;
      }
   ): Promise<any>;
   /** 等待页面加载状态 */
   waitForLoadState(
      state?: 'load' | 'domcontentloaded' | 'networkidle',
      options?: {
         timeout?: number;
         waitUntil?: 'load' | 'domcontentloaded' | 'networkidle';
      }
   ): Promise<void>;
   /** 等待 URL 匹配 */
   waitForURL(
      url: string | RegExp,
      options?: { timeout?: number }
   ): Promise<void>;
};

// === Buffer 类型定义 ===
/**
 * Buffer 类型接口
 * 用于处理二进制数据的缓冲区
 */
interface Buffer<T extends ArrayBufferLike = ArrayBufferLike>
   extends Uint8Array {
   /** 底层的 ArrayBuffer */
   readonly buffer: T;
   /** 字节偏移量 */
   readonly byteOffset: number;
   /** 字节长度 */
   readonly byteLength: number;
   /** 数组长度 */
   readonly length: number;
}

// === 主要类型定义 ===
/**
 * 构建代理对象属性的类型工具
 * 根据模式选择或排除指定属性
 */
type BuildProxyProps<
   Mode extends 'pick' | 'omit',
   Target extends Record<string, any>,
   K extends keyof Target = keyof Target
> = Mode extends 'pick' ? Pick<Target, K> : Omit<Target, K>;

/**
 * 构建代理对象的函数
 * 用于创建只包含指定属性的对象代理
 */
declare const buildProxy: <
   Target extends Record<string, any>,
   Mode extends 'pick' | 'omit',
   K extends keyof Target = keyof Target
>(
   target: Target,
   props: K[],
   mode?: Mode
) => BuildProxyProps<Mode, Target, K>;

/**
 * 保存数据的验证模式
 * 定义可保存数据的结构规范
 */
declare const SaveSchema: z.ZodDiscriminatedUnion<
   [
      z.ZodObject<
         {
            type: z.ZodLiteral<'image'>;
            buffer: z.ZodCustom<
               Buffer<ArrayBufferLike>,
               Buffer<ArrayBufferLike>
            >;
            name: z.ZodOptional<z.ZodString>;
         },
         z.core.$strip
      >
   ]
>;

/**
 * 保存数据的类型定义
 * 从验证模式推断出的类型
 */
type SaveType = z.infer<typeof SaveSchema>;

/**
 * 检查点上下文接口
 * 提供分数管理的方法
 */
interface IDefineCheckPointCtx {
   score: {
      /** 增加分数 */
      increment: (increment: number) => void;
      /** 设置分数 */
      set: (value: number) => void;
      /** 获取当前分数 */
      get: () => number;
   };
}

/**
 * 系统核心类
 * 提供文件管理、检查点定义、期望验证等功能
 */
declare class System {
   /** 文件根目录路径 */
   fileRoot: string;
   /** 检查点数组 */
   _checkPoints: Array<{
      name: string;
      totalScore: number;
      handler: (
         ctx: IDefineCheckPointCtx
      ) => Promise<number | void> | number | void;
   }>;

   /** 构造函数 */
   constructor(fileRoot: string);

   /** 保存数据到文件系统 */
   saveOrCompare(type: SaveType): Promise<number>;

   /** 定义检查点 */
   defineCheckPoint(
      /** 检查点名称 */
      name: string,
      /** 检查点总分 */
      totalScore: number,
      /** 检查点处理函数 */
      handler: (
         ctx: IDefineCheckPointCtx
      ) => Promise<number | void> | number | void
   ): void;

   /** 验证期望条件 */
   expect(
      expression: any | (() => Promise<any> | any),
      desc?: string
   ): Promise<void>;

   /** 保存图片到文件系统 */
   saveImage(buffer: Buffer, name?: `${string}.png`): Promise<string>;

   /** 计算分数 */
   score(totalScore: number, rating: () => number): Promise<number>;
}

/**
 * 获取暴露给用户的系统接口
 * 只包含安全的公共方法
 */
declare const getExposeSystem: (sys: System) => {
   saveOrCompare(type: SaveType): Promise<number>;
   score: (totalScore: number, rating: () => number) => Promise<number>;
   defineCheckPoint: (
      name: string,
      totalScore: number,
      handler: (
         ctx: IDefineCheckPointCtx
      ) => Promise<number | void> | number | void
   ) => void;
   expect: (
      expression: any | (() => Promise<any> | any),
      desc?: string
   ) => Promise<void>;
   readonly root: string;
};

/**
 * 处理器上下文接口
 * 包含页面对象和系统接口
 */
interface IHandlerCtx {
   /** 暴露的页面对象 */
   page: ExposePage;
   /** 系统接口 */
   $: ReturnType<typeof getExposeSystem>;
}

/**
 * 测试结果接口
 * 包含分数、状态和详细信息
 */
interface ITestResult {
   /** 得分 */
   score: number;
   /** 总分 */
   totalScore: number;
   /** 详细信息 */
   details: string;
   /** 状态（通过/失败） */
   status: 'pass' | 'fail';
}

/**
 * 获取暴露的页面对象
 * 移除危险的导航方法
 */
declare const getExposePage: (page: Page) => Omit<Page, 'goto'>;

/**
 * 暴露的页面类型
 * 安全的页面操作接口
 */
type ExposePage = ReturnType<typeof getExposePage>;

   /**
    * 定义测试处理器
    * 创建一个测试执行函数，用于运行自动化测试并评分
    *
    * @param handler 测试处理函数，接收页面和系统接口作为参数
    * @returns 返回一个可执行的测试函数
    *
    * @example
    * ```typescript
    * import { defineTestHandler } from '@/lib/system';
    *
    * const testHandler = defineTestHandler(async ({ page, $ }) => {
    *   // 定义检查点
    *   $.defineCheckPoint('页面标题检查', 10, ({ score }) => {
    *     const title = page.title();
    *     if (title.includes('预期标题')) {
    *       score.set(10);
    *     }
    *   });
    *
    *   // 执行页面操作
    *   await page.click('#submit-button');
    *   await $.expect(page.url().includes('/success'), '应该导航到成功页面');
    * });
    * ```
    */
   declear const defineTestHandler: (
      handler: (ctx: IHandlerCtx) => Promise<void>
   ) => (
      page: ExposePage,
      system: System
   ) => Promise<{
      /** 所有检查点的结果 */
      results: ITestResult[];
      /** 总得分 */
      totalScore: number;
      /** 最高单项得分 */
      maxScore: number;
      /** 整体测试状态 */
      status: string;
   }>;
