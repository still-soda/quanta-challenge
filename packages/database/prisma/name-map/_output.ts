// This file is auto-generated by prisma/name-map/generate-script.mjs
// Do not edit this file directly.

export const schemaToRealMap = {
   "User": "users",
   "RoleTransition": "role_transitions",
   "Auth": "auths",
   "WebAuthnCredential": "webauthn_credentials",
   "Image": "images",
   "UserImage": "user_images",
   "BaseProblems": "base_problems",
   "Problems": "problems",
   "ProblemVersionTransitions": "problem_version_transitions",
   "ProblemDefaultCovers": "problem_default_covers",
   "AuditRecords": "audit_records",
   "StatusTransitions": "status_transitions",
   "TemplateJudgeRecords": "template_judge_records",
   "JudgeStatus": "judge_status",
   "JudgeRecords": "judge_records",
   "JudgeFiles": "judge_files",
   "Tags": "tags",
   "FileSystems": "file_systems",
   "Projects": "projects",
   "VirtualFiles": "virtual_files",
   "ShadowFile": "shadow_files",
   "DailyProblem": "daily_problems",
   "DailyCheckin": "daily_checkins",
   "Achievement": "achievements",
   "AchievementPreAchievement": "achievement_pre_achievements",
   "CheckinAchievement": "checkin_achievements",
   "AchievementDependencyDataRequestRecord": "achievement_dependency_data_request_records",
   "AchievementDependencyData": "achievement_dependency_data",
   "AchievementValidateScript": "achievement_validate_scripts",
   "AchievementDepDataLoader": "achievement_dep_data_loaders",
   "UserAchievement": "user_achievements",
   "UserStatistic": "user_statistics",
   "RankingHistory": "ranking_histories",
   "UserSetting": "user_settings"
} as const;
export const realToSchemaMap = {
   "users": "User",
   "role_transitions": "RoleTransition",
   "auths": "Auth",
   "webauthn_credentials": "WebAuthnCredential",
   "images": "Image",
   "user_images": "UserImage",
   "base_problems": "BaseProblems",
   "problems": "Problems",
   "problem_version_transitions": "ProblemVersionTransitions",
   "problem_default_covers": "ProblemDefaultCovers",
   "audit_records": "AuditRecords",
   "status_transitions": "StatusTransitions",
   "template_judge_records": "TemplateJudgeRecords",
   "judge_status": "JudgeStatus",
   "judge_records": "JudgeRecords",
   "judge_files": "JudgeFiles",
   "tags": "Tags",
   "file_systems": "FileSystems",
   "projects": "Projects",
   "virtual_files": "VirtualFiles",
   "shadow_files": "ShadowFile",
   "daily_problems": "DailyProblem",
   "daily_checkins": "DailyCheckin",
   "achievements": "Achievement",
   "achievement_pre_achievements": "AchievementPreAchievement",
   "checkin_achievements": "CheckinAchievement",
   "achievement_dependency_data_request_records": "AchievementDependencyDataRequestRecord",
   "achievement_dependency_data": "AchievementDependencyData",
   "achievement_validate_scripts": "AchievementValidateScript",
   "achievement_dep_data_loaders": "AchievementDepDataLoader",
   "user_achievements": "UserAchievement",
   "user_statistics": "UserStatistic",
   "ranking_histories": "RankingHistory",
   "user_settings": "UserSetting"
} as const;

export const validRealNames = ["users","role_transitions","auths","webauthn_credentials","images","user_images","base_problems","problems","problem_version_transitions","problem_default_covers","audit_records","status_transitions","template_judge_records","judge_status","judge_records","judge_files","tags","file_systems","projects","virtual_files","shadow_files","daily_problems","daily_checkins","achievements","achievement_pre_achievements","checkin_achievements","achievement_dependency_data_request_records","achievement_dependency_data","achievement_validate_scripts","achievement_dep_data_loaders","user_achievements","user_statistics","ranking_histories","user_settings"] as const;

export const realNameFieldsMap = {
   "users": new Set(["id","role","name","email","displayName","imageId","createdAt","updatedAt","lastLogin","avatar","auths","WebAuthnCredential","StatusTransitions","Tag","FileSystem","VirtualFile","Project","RoleTransition","UserImage","JudgeRecord","BaseProblems","ProblemVersionTransitions","DailyCheckin","UserAchievement","Achievement","UserStatistic","RankingHistory","UserSettings"] as const),
   "role_transitions": new Set(["id","userId","fromRole","toRole","changeByType","changeByUserId","createdAt","user"] as const),
   "auths": new Set(["id","userId","provider","providerId","accessToken","refreshToken","email","password","createdAt","updatedAt","user"] as const),
   "webauthn_credentials": new Set(["id","userId","publicKey","counter","lastUsed","transport","createdAt","updatedAt","user"] as const),
   "images": new Set(["id","name","thumbhash","createdAt","updatedAt","refCount","User","Tag","ShadowFile","ProblemDefaultCover","UserImage","Problem","Achievement"] as const),
   "user_images": new Set(["id","userId","imageId","createdAt","updatedAt","user","image"] as const),
   "base_problems": new Set(["id","authorId","currentPid","createdAt","updatedAt","Author","CurrentProblem","ProblemVersions","ProblemVersionTransitions","DailyProblem"] as const),
   "problems": new Set(["pid","baseId","title","detail","isDeprecated","difficulty","totalScore","status","createdAt","updatedAt","coverImageId","tags","AuditRecord","StatusTransitions","JudgeFile","Project","ProblemDefaultCover","JudgeRecord","TemplateJudgeRecord","CoverImage","BaseProblem","CurrentOfBase","ProblemVersionTransitions","ProblemVersionTransitionsTo","JudgeStatus"] as const),
   "problem_version_transitions": new Set(["id","baseProblemId","fromId","toId","changeByUserId","changeByType","createdAt","base","from","to","user"] as const),
   "problem_default_covers": new Set(["id","problemId","imageId","createdAt","updatedAt","problem","image"] as const),
   "audit_records": new Set(["rid","problemId","result","reason","score","timeCost","createdAt","problem"] as const),
   "status_transitions": new Set(["id","problemId","fromStatus","toStatus","changeByType","changeByUserId","createdAt","problem","user"] as const),
   "template_judge_records": new Set(["id","judgeRecordId","problemId","createdAt","problem","judgeRecord"] as const),
   "judge_status": new Set(["id","problemId","passedCount","totalCount","updatedAt","problem"] as const),
   "judge_records": new Set(["id","problemId","userId","info","result","type","score","pendingTime","judgingTime","createdAt","problem","user","ShadowFile","TemplateJudgeRecord"] as const),
   "judge_files": new Set(["id","judgeScript","problemId","problem"] as const),
   "tags": new Set(["tid","name","description","creatorId","imageId","color","createdAt","updatedAt","creator","image","Problem"] as const),
   "file_systems": new Set(["fsid","ownerId","projectId","files","createdAt","updatedAt","owner","project"] as const),
   "projects": new Set(["pid","isTemplate","name","ownerId","problemId","createdAt","updatedAt","owner","problem","FileSystem"] as const),
   "virtual_files": new Set(["vid","path","content","ownerId","createdAt","updatedAt","owner","FileSystem","fileSystemFsid"] as const),
   "shadow_files": new Set(["sfid","type","judgeRecordId","imageId","text","jsonb","createdAt","updatedAt","judgeRecord","image"] as const),
   "daily_problems": new Set(["id","date","baseProblemId","createdAt","baseProblem"] as const),
   "daily_checkins": new Set(["id","userId","date","createdAt","user"] as const),
   "achievements": new Set(["id","name","description","badgeImageId","createdAt","updatedAt","authorId","author","badgeImage","UserAchievement","AchievementDependencyData","AchievementValidateScript","CheckinAchievement","AchievementPreAchievement","AchievementPreAchievementAsPre"] as const),
   "achievement_pre_achievements": new Set(["id","achievementId","preAchievementId","createdAt","achievement","preAchievement"] as const),
   "checkin_achievements": new Set(["id","achievementId","createdAt","achievement"] as const),
   "achievement_dependency_data_request_records": new Set(["id","userId","success","reason","sql","name","createdAt"] as const),
   "achievement_dependency_data": new Set(["id","achievementId","achievementDepDataLoaderId","createdAt","updatedAt","achievementDepDataLoader","achievement"] as const),
   "achievement_validate_scripts": new Set(["id","achievementId","script","createdAt","updatedAt","achievement"] as const),
   "achievement_dep_data_loaders": new Set(["id","name","description","sql","type","isList","createdAt","updatedAt","AchievementDependencyData"] as const),
   "user_achievements": new Set(["id","progress","userId","achievementId","achievedAt","updatedAt","user","achievement"] as const),
   "user_statistics": new Set(["id","userId","score","correctRate","passCount","createdAt","updatedAt","user"] as const),
   "ranking_histories": new Set(["id","userId","score","rank","date","createdAt","user"] as const),
   "user_settings": new Set(["id","userId","key","value","createdAt","updatedAt","user"] as const)} as const;

export const validRealNameFields = ["users.id","users.role","users.name","users.email","users.displayName","users.imageId","users.createdAt","users.updatedAt","users.lastLogin","users.avatar","users.auths","users.WebAuthnCredential","users.StatusTransitions","users.Tag","users.FileSystem","users.VirtualFile","users.Project","users.RoleTransition","users.UserImage","users.JudgeRecord","users.BaseProblems","users.ProblemVersionTransitions","users.DailyCheckin","users.UserAchievement","users.Achievement","users.UserStatistic","users.RankingHistory","users.UserSettings","role_transitions.id","role_transitions.userId","role_transitions.fromRole","role_transitions.toRole","role_transitions.changeByType","role_transitions.changeByUserId","role_transitions.createdAt","role_transitions.user","auths.id","auths.userId","auths.provider","auths.providerId","auths.accessToken","auths.refreshToken","auths.email","auths.password","auths.createdAt","auths.updatedAt","auths.user","webauthn_credentials.id","webauthn_credentials.userId","webauthn_credentials.publicKey","webauthn_credentials.counter","webauthn_credentials.lastUsed","webauthn_credentials.transport","webauthn_credentials.createdAt","webauthn_credentials.updatedAt","webauthn_credentials.user","images.id","images.name","images.thumbhash","images.createdAt","images.updatedAt","images.refCount","images.User","images.Tag","images.ShadowFile","images.ProblemDefaultCover","images.UserImage","images.Problem","images.Achievement","user_images.id","user_images.userId","user_images.imageId","user_images.createdAt","user_images.updatedAt","user_images.user","user_images.image","base_problems.id","base_problems.authorId","base_problems.currentPid","base_problems.createdAt","base_problems.updatedAt","base_problems.Author","base_problems.CurrentProblem","base_problems.ProblemVersions","base_problems.ProblemVersionTransitions","base_problems.DailyProblem","problems.pid","problems.baseId","problems.title","problems.detail","problems.isDeprecated","problems.difficulty","problems.totalScore","problems.status","problems.createdAt","problems.updatedAt","problems.coverImageId","problems.tags","problems.AuditRecord","problems.StatusTransitions","problems.JudgeFile","problems.Project","problems.ProblemDefaultCover","problems.JudgeRecord","problems.TemplateJudgeRecord","problems.CoverImage","problems.BaseProblem","problems.CurrentOfBase","problems.ProblemVersionTransitions","problems.ProblemVersionTransitionsTo","problems.JudgeStatus","problem_version_transitions.id","problem_version_transitions.baseProblemId","problem_version_transitions.fromId","problem_version_transitions.toId","problem_version_transitions.changeByUserId","problem_version_transitions.changeByType","problem_version_transitions.createdAt","problem_version_transitions.base","problem_version_transitions.from","problem_version_transitions.to","problem_version_transitions.user","problem_default_covers.id","problem_default_covers.problemId","problem_default_covers.imageId","problem_default_covers.createdAt","problem_default_covers.updatedAt","problem_default_covers.problem","problem_default_covers.image","audit_records.rid","audit_records.problemId","audit_records.result","audit_records.reason","audit_records.score","audit_records.timeCost","audit_records.createdAt","audit_records.problem","status_transitions.id","status_transitions.problemId","status_transitions.fromStatus","status_transitions.toStatus","status_transitions.changeByType","status_transitions.changeByUserId","status_transitions.createdAt","status_transitions.problem","status_transitions.user","template_judge_records.id","template_judge_records.judgeRecordId","template_judge_records.problemId","template_judge_records.createdAt","template_judge_records.problem","template_judge_records.judgeRecord","judge_status.id","judge_status.problemId","judge_status.passedCount","judge_status.totalCount","judge_status.updatedAt","judge_status.problem","judge_records.id","judge_records.problemId","judge_records.userId","judge_records.info","judge_records.result","judge_records.type","judge_records.score","judge_records.pendingTime","judge_records.judgingTime","judge_records.createdAt","judge_records.problem","judge_records.user","judge_records.ShadowFile","judge_records.TemplateJudgeRecord","judge_files.id","judge_files.judgeScript","judge_files.problemId","judge_files.problem","tags.tid","tags.name","tags.description","tags.creatorId","tags.imageId","tags.color","tags.createdAt","tags.updatedAt","tags.creator","tags.image","tags.Problem","file_systems.fsid","file_systems.ownerId","file_systems.projectId","file_systems.files","file_systems.createdAt","file_systems.updatedAt","file_systems.owner","file_systems.project","projects.pid","projects.isTemplate","projects.name","projects.ownerId","projects.problemId","projects.createdAt","projects.updatedAt","projects.owner","projects.problem","projects.FileSystem","virtual_files.vid","virtual_files.path","virtual_files.content","virtual_files.ownerId","virtual_files.createdAt","virtual_files.updatedAt","virtual_files.owner","virtual_files.FileSystem","virtual_files.fileSystemFsid","shadow_files.sfid","shadow_files.type","shadow_files.judgeRecordId","shadow_files.imageId","shadow_files.text","shadow_files.jsonb","shadow_files.createdAt","shadow_files.updatedAt","shadow_files.judgeRecord","shadow_files.image","daily_problems.id","daily_problems.date","daily_problems.baseProblemId","daily_problems.createdAt","daily_problems.baseProblem","daily_checkins.id","daily_checkins.userId","daily_checkins.date","daily_checkins.createdAt","daily_checkins.user","achievements.id","achievements.name","achievements.description","achievements.badgeImageId","achievements.createdAt","achievements.updatedAt","achievements.authorId","achievements.author","achievements.badgeImage","achievements.UserAchievement","achievements.AchievementDependencyData","achievements.AchievementValidateScript","achievements.CheckinAchievement","achievements.AchievementPreAchievement","achievements.AchievementPreAchievementAsPre","achievement_pre_achievements.id","achievement_pre_achievements.achievementId","achievement_pre_achievements.preAchievementId","achievement_pre_achievements.createdAt","achievement_pre_achievements.achievement","achievement_pre_achievements.preAchievement","checkin_achievements.id","checkin_achievements.achievementId","checkin_achievements.createdAt","checkin_achievements.achievement","achievement_dependency_data_request_records.id","achievement_dependency_data_request_records.userId","achievement_dependency_data_request_records.success","achievement_dependency_data_request_records.reason","achievement_dependency_data_request_records.sql","achievement_dependency_data_request_records.name","achievement_dependency_data_request_records.createdAt","achievement_dependency_data.id","achievement_dependency_data.achievementId","achievement_dependency_data.achievementDepDataLoaderId","achievement_dependency_data.createdAt","achievement_dependency_data.updatedAt","achievement_dependency_data.achievementDepDataLoader","achievement_dependency_data.achievement","achievement_validate_scripts.id","achievement_validate_scripts.achievementId","achievement_validate_scripts.script","achievement_validate_scripts.createdAt","achievement_validate_scripts.updatedAt","achievement_validate_scripts.achievement","achievement_dep_data_loaders.id","achievement_dep_data_loaders.name","achievement_dep_data_loaders.description","achievement_dep_data_loaders.sql","achievement_dep_data_loaders.type","achievement_dep_data_loaders.isList","achievement_dep_data_loaders.createdAt","achievement_dep_data_loaders.updatedAt","achievement_dep_data_loaders.AchievementDependencyData","user_achievements.id","user_achievements.progress","user_achievements.userId","user_achievements.achievementId","user_achievements.achievedAt","user_achievements.updatedAt","user_achievements.user","user_achievements.achievement","user_statistics.id","user_statistics.userId","user_statistics.score","user_statistics.correctRate","user_statistics.passCount","user_statistics.createdAt","user_statistics.updatedAt","user_statistics.user","ranking_histories.id","ranking_histories.userId","ranking_histories.score","ranking_histories.rank","ranking_histories.date","ranking_histories.createdAt","ranking_histories.user","user_settings.id","user_settings.userId","user_settings.key","user_settings.value","user_settings.createdAt","user_settings.updatedAt","user_settings.user"] as const;

export type SchemaToRealMap = typeof schemaToRealMap;
export type RealToSchemaMap = typeof realToSchemaMap;

export type SchemaName = keyof SchemaToRealMap;
export type RealName = keyof RealToSchemaMap;

export const nestedModelMapping = {
   "User": {
      "avatar": "Image:Single:Optional",
      "auths": "Auth:List:Required",
      "WebAuthnCredential": "WebAuthnCredential:List:Required",
      "StatusTransitions": "StatusTransitions:List:Required",
      "Tag": "Tags:List:Required",
      "FileSystem": "FileSystems:List:Required",
      "VirtualFile": "VirtualFiles:List:Required",
      "Project": "Projects:List:Required",
      "RoleTransition": "RoleTransition:List:Required",
      "UserImage": "UserImage:List:Required",
      "JudgeRecord": "JudgeRecords:List:Required",
      "BaseProblems": "BaseProblems:List:Required",
      "ProblemVersionTransitions": "ProblemVersionTransitions:List:Required",
      "DailyCheckin": "DailyCheckin:List:Required",
      "UserAchievement": "UserAchievement:List:Required",
      "Achievement": "Achievement:List:Required",
      "UserStatistic": "UserStatistic:Single:Optional",
      "RankingHistory": "RankingHistory:List:Required",
      "UserSettings": "UserSetting:Single:Optional"
   },
   "RoleTransition": {
      "user": "User:Single:Required"
   },
   "Auth": {
      "user": "User:Single:Required"
   },
   "WebAuthnCredential": {
      "user": "User:Single:Required"
   },
   "Image": {
      "User": "User:List:Required",
      "Tag": "Tags:List:Required",
      "ShadowFile": "ShadowFile:List:Required",
      "ProblemDefaultCover": "ProblemDefaultCovers:List:Required",
      "UserImage": "UserImage:List:Required",
      "Problem": "Problems:List:Required",
      "Achievement": "Achievement:List:Required"
   },
   "UserImage": {
      "user": "User:Single:Required",
      "image": "Image:Single:Required"
   },
   "BaseProblems": {
      "Author": "User:Single:Required",
      "CurrentProblem": "Problems:Single:Optional",
      "ProblemVersions": "Problems:List:Required",
      "ProblemVersionTransitions": "ProblemVersionTransitions:List:Required",
      "DailyProblem": "DailyProblem:List:Required"
   },
   "Problems": {
      "tags": "Tags:List:Required",
      "AuditRecord": "AuditRecords:List:Required",
      "StatusTransitions": "StatusTransitions:List:Required",
      "JudgeFile": "JudgeFiles:List:Required",
      "Project": "Projects:List:Required",
      "ProblemDefaultCover": "ProblemDefaultCovers:List:Required",
      "JudgeRecord": "JudgeRecords:List:Required",
      "TemplateJudgeRecord": "TemplateJudgeRecords:List:Required",
      "CoverImage": "Image:Single:Optional",
      "BaseProblem": "BaseProblems:Single:Required",
      "CurrentOfBase": "BaseProblems:Single:Optional",
      "ProblemVersionTransitions": "ProblemVersionTransitions:List:Required",
      "ProblemVersionTransitionsTo": "ProblemVersionTransitions:List:Required",
      "JudgeStatus": "JudgeStatus:Single:Optional"
   },
   "ProblemVersionTransitions": {
      "base": "BaseProblems:Single:Required",
      "from": "Problems:Single:Required",
      "to": "Problems:Single:Required",
      "user": "User:Single:Optional"
   },
   "ProblemDefaultCovers": {
      "problem": "Problems:Single:Required",
      "image": "Image:Single:Required"
   },
   "AuditRecords": {
      "problem": "Problems:Single:Required"
   },
   "StatusTransitions": {
      "problem": "Problems:Single:Required",
      "user": "User:Single:Optional"
   },
   "TemplateJudgeRecords": {
      "problem": "Problems:Single:Required",
      "judgeRecord": "JudgeRecords:Single:Required"
   },
   "JudgeStatus": {
      "problem": "Problems:Single:Required"
   },
   "JudgeRecords": {
      "problem": "Problems:Single:Required",
      "user": "User:Single:Required",
      "ShadowFile": "ShadowFile:List:Required",
      "TemplateJudgeRecord": "TemplateJudgeRecords:List:Required"
   },
   "JudgeFiles": {
      "problem": "Problems:Single:Required"
   },
   "Tags": {
      "creator": "User:Single:Required",
      "image": "Image:Single:Optional",
      "Problem": "Problems:List:Required"
   },
   "FileSystems": {
      "files": "VirtualFiles:List:Required",
      "owner": "User:Single:Required",
      "project": "Projects:Single:Optional"
   },
   "Projects": {
      "owner": "User:Single:Required",
      "problem": "Problems:Single:Required",
      "FileSystem": "FileSystems:List:Required"
   },
   "VirtualFiles": {
      "owner": "User:Single:Required",
      "FileSystem": "FileSystems:Single:Optional"
   },
   "ShadowFile": {
      "judgeRecord": "JudgeRecords:Single:Required",
      "image": "Image:Single:Optional"
   },
   "DailyProblem": {
      "baseProblem": "BaseProblems:Single:Required"
   },
   "DailyCheckin": {
      "user": "User:Single:Required"
   },
   "Achievement": {
      "author": "User:Single:Optional",
      "badgeImage": "Image:Single:Required",
      "UserAchievement": "UserAchievement:List:Required",
      "AchievementDependencyData": "AchievementDependencyData:List:Required",
      "AchievementValidateScript": "AchievementValidateScript:Single:Optional",
      "CheckinAchievement": "CheckinAchievement:Single:Optional",
      "AchievementPreAchievement": "AchievementPreAchievement:List:Required",
      "AchievementPreAchievementAsPre": "AchievementPreAchievement:List:Required"
   },
   "AchievementPreAchievement": {
      "achievement": "Achievement:Single:Required",
      "preAchievement": "Achievement:Single:Required"
   },
   "CheckinAchievement": {
      "achievement": "Achievement:Single:Required"
   },
   "AchievementDependencyData": {
      "achievementDepDataLoader": "AchievementDepDataLoader:Single:Required",
      "achievement": "Achievement:Single:Required"
   },
   "AchievementValidateScript": {
      "achievement": "Achievement:Single:Required"
   },
   "AchievementDepDataLoader": {
      "AchievementDependencyData": "AchievementDependencyData:List:Required"
   },
   "UserAchievement": {
      "user": "User:Single:Required",
      "achievement": "Achievement:Single:Required"
   },
   "UserStatistic": {
      "user": "User:Single:Required"
   },
   "RankingHistory": {
      "user": "User:Single:Required"
   },
   "UserSetting": {
      "user": "User:Single:Required"
   }
} as const;

export type NestedModelPath = {
   [K in keyof typeof nestedModelMapping]: `${K & string}.${keyof (typeof nestedModelMapping)[K] & string}`;
}[keyof typeof nestedModelMapping];

export type NestedModelPathType = {
   [K in NestedModelPath]: K extends `${infer Model}.${infer Field}`
      ? Model extends keyof typeof nestedModelMapping
         ? Field extends keyof (typeof nestedModelMapping)[Model]
            ? (typeof nestedModelMapping)[Model][Field]
            : never
         : never
      : never;
}

export type NestedModalPathTypeRealName = {
   [K in NestedModelPath]: K extends `${infer Model}.${infer Field}`
      ? Model extends keyof typeof nestedModelMapping
         ? Field extends keyof (typeof nestedModelMapping)[Model]
            ? (typeof nestedModelMapping)[Model][Field] extends `${infer RealName}:${string}:${string}`
               ? SchemaToRealMap[RealName & keyof SchemaToRealMap]
               : never
            : never
         : never
      : never;
};

export type NestedModalPathTypeIsList = {
   [K in NestedModelPath]: K extends `${infer Model}.${infer Field}`
      ? Model extends keyof typeof nestedModelMapping
         ? Field extends keyof (typeof nestedModelMapping)[Model]
            ? (typeof nestedModelMapping)[Model][Field] extends `${string}:List:${string}`
               ? true
               : false
            : never
         : never
      : never;
};

export type NestedModalPathTypeIsOptional = {
   [K in NestedModelPath]: K extends `${infer Model}.${infer Field}`
      ? Model extends keyof typeof nestedModelMapping
         ? Field extends keyof (typeof nestedModelMapping)[Model]
            ? (typeof nestedModelMapping)[Model][Field] extends `${string}:${string}:Optional`
               ? true
               : false
            : never
         : never
      : never;
};

export type NestedModalPathTypeIsRequired = {
   [K in NestedModelPath]: K extends `${infer Model}.${infer Field}`
      ? Model extends keyof typeof nestedModelMapping
         ? Field extends keyof (typeof nestedModelMapping)[Model]
            ? (typeof nestedModelMapping)[Model][Field] extends `${string}:${string}:Required`
               ? true
               : false
            : never
         : never
      : never;
}

export type ValidFieldPath = typeof validRealNameFields[number];
