generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id        String   @id @default(cuid())
  role      UserRole @default(USER)
  email     String?  @unique
  name      String?
  imageId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLogin DateTime @default(now())

  avatar                    Image?                      @relation(fields: [imageId], references: [id])
  auths                     Auth[]
  WebAuthnCredential        WebAuthnCredential[]
  StatusTransitions         StatusTransitions[]
  Tag                       Tags[]
  FileSystem                FileSystems[]
  VirtualFile               VirtualFiles[]
  Project                   Projects[]
  RoleTransition            RoleTransition[]
  UserImage                 UserImage[]
  JudgeRecord               JudgeRecords[]
  BaseProblems              BaseProblems[]
  ProblemVersionTransitions ProblemVersionTransitions[]
  DailyCheckin              DailyCheckin[]

  @@map("users")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
}

// 角色变更记录表
model RoleTransition {
  id             Int          @id @default(autoincrement())
  userId         String
  fromRole       UserRole
  toRole         UserRole
  changeByType   ChangeByType
  changeByUserId String?
  createdAt      DateTime     @default(now())

  user User @relation(fields: [userId], references: [id])

  @@map("role_transitions")
}

// 认证提供商枚举
enum AuthProvider {
  QQ
  EMAIL
}

// 认证表
model Auth {
  id           String       @id @default(cuid())
  userId       String
  provider     AuthProvider
  providerId   String
  accessToken  String?
  refreshToken String?
  email        String?
  password     String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerId])
  @@map("auths")
}

// WebAuthn 凭证表
model WebAuthnCredential {
  id        String   @id @default(cuid())
  userId    String
  publicKey String
  counter   Int      @default(0)
  lastUsed  DateTime @default(now())
  transport String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, publicKey])
  @@map("webauthn_credentials")
}

// 图片表
model Image {
  id        String   @id @default(cuid())
  name      String
  thumbhash String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  refCount  Int      @default(0)

  User                User[]
  Tag                 Tags[]
  ShadowFile          ShadowFile[]
  ProblemDefaultCover ProblemDefaultCovers[]
  UserImage           UserImage[]
  Problem             Problems[]

  @@map("images")
}

model UserImage {
  id        String   @id @default(cuid())
  userId    String
  imageId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id])
  image Image @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@unique([userId, imageId])
  @@map("user_images")
}

// 问题表
model BaseProblems {
  id         Int      @id @default(autoincrement())
  authorId   String
  currentPid Int?     @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  Author                    User                        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  CurrentProblem            Problems?                   @relation("CurrentProblem", fields: [currentPid], references: [pid], onDelete: SetNull)
  ProblemVersions           Problems[]                  @relation("ProblemVersions")
  ProblemVersionTransitions ProblemVersionTransitions[]

  @@map("base_problems")
}

// 问题版本表
model Problems {
  pid          Int        @id @default(autoincrement())
  baseId       Int
  title        String
  detail       String
  isDeprecated Boolean    @default(false)
  difficulty   Difficulty
  totalScore   Int
  status       Status
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  coverImageId String?
  tags         Tags[]

  AuditRecord                 AuditRecords[]
  StatusTransitions           StatusTransitions[]
  JudgeFile                   JudgeFiles[]
  Project                     Projects[]
  ProblemDefaultCover         ProblemDefaultCovers[]
  JudgeRecord                 JudgeRecords[]
  TemplateJudgeRecord         TemplateJudgeRecords[]
  CoverImage                  Image?                      @relation(fields: [coverImageId], references: [id])
  BaseProblem                 BaseProblems                @relation("ProblemVersions", fields: [baseId], references: [id], onDelete: Cascade)
  CurrentOfBase               BaseProblems?               @relation("CurrentProblem")
  ProblemVersionTransitions   ProblemVersionTransitions[] @relation("FromProblemVersions")
  ProblemVersionTransitionsTo ProblemVersionTransitions[] @relation("ToProblemVersions")
  JudgeStatus                 JudgeStatus?
  DailyProblem                DailyProblem?

  @@map("problems")
}

// 问题版本变更记录表
model ProblemVersionTransitions {
  id             Int          @id @default(autoincrement())
  baseProblemId  Int
  fromId         Int
  toId           Int
  changeByUserId String?
  changeByType   ChangeByType
  createdAt      DateTime     @default(now())

  base BaseProblems @relation(fields: [baseProblemId], references: [id], onDelete: Cascade)
  from Problems     @relation("FromProblemVersions", fields: [fromId], references: [pid], onDelete: Cascade)
  to   Problems     @relation("ToProblemVersions", fields: [toId], references: [pid], onDelete: Cascade)
  user User?        @relation(fields: [changeByUserId], references: [id])

  @@map("problem_version_transitions")
}

model ProblemDefaultCovers {
  id        Int      @id @default(autoincrement())
  problemId Int
  imageId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problem Problems @relation(fields: [problemId], references: [pid], onDelete: Cascade)
  image   Image    @relation(fields: [imageId], references: [id])

  @@map("problem_default_covers")
}

enum Difficulty {
  easy
  medium
  hard
  very_hard
}

enum Status {
  draft
  invalid
  ready
  published
}

// 审核记录表
model AuditRecords {
  rid       Int      @id @default(autoincrement())
  problemId Int
  result    Result
  reason    String?
  score     Int      @default(0)
  timeCost  Int      @default(0)
  createdAt DateTime @default(now())

  problem Problems @relation(fields: [problemId], references: [pid], onDelete: Cascade)

  @@map("audit_records")
}

enum Result {
  failed
  passed
}

// 状态变更记录表
model StatusTransitions {
  id             Int          @id @default(autoincrement())
  problemId      Int
  fromStatus     Status
  toStatus       Status
  changeByType   ChangeByType
  changeByUserId String?
  createdAt      DateTime     @default(now())

  problem Problems @relation(fields: [problemId], references: [pid], onDelete: Cascade)
  user    User?    @relation(fields: [changeByUserId], references: [id])

  @@map("status_transitions")
}

enum ChangeByType {
  user
  system
}

model TemplateJudgeRecords {
  id            Int      @id @default(autoincrement())
  judgeRecordId Int
  problemId     Int
  createdAt     DateTime @default(now())

  problem     Problems     @relation(fields: [problemId], references: [pid], onDelete: Cascade)
  judgeRecord JudgeRecords @relation(fields: [judgeRecordId], references: [id], onDelete: Cascade)

  @@map("template_judge_records")
}

// 判题状态表
model JudgeStatus {
  id          Int      @id @default(autoincrement())
  problemId   Int      @unique
  passedCount Int      @default(0)
  totalCount  Int      @default(0)
  updatedAt   DateTime @updatedAt

  problem Problems @relation(fields: [problemId], references: [pid], onDelete: Cascade)

  @@map("judge_status")
}

model JudgeRecords {
  id          Int         @id @default(autoincrement())
  problemId   Int
  userId      String
  info        Json
  result      JudgeResult @default(pending)
  type        JudgeType
  score       Int         @default(0)
  pendingTime Int         @default(0)
  judgingTime Int         @default(0)
  createdAt   DateTime    @default(now())

  problem             Problems               @relation(fields: [problemId], references: [pid], onDelete: Cascade)
  user                User                   @relation(fields: [userId], references: [id])
  ShadowFile          ShadowFile[]
  TemplateJudgeRecord TemplateJudgeRecords[]

  @@map("judge_records")
}

enum JudgeResult {
  pending
  success
  failed
}

enum JudgeType {
  audit
  judge
}

// 判题文件表
model JudgeFiles {
  id          Int    @id @default(autoincrement())
  judgeScript String
  problemId   Int

  problem Problems @relation(fields: [problemId], references: [pid], onDelete: Cascade)

  @@map("judge_files")
}

// 标签表
model Tags {
  tid         Int      @id @default(autoincrement())
  name        String
  description String?
  creatorId   String
  imageId     String?
  color       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creator User       @relation(fields: [creatorId], references: [id])
  image   Image?     @relation(fields: [imageId], references: [id])
  Problem Problems[]

  @@map("tags")
}

// 文件系统表
model FileSystems {
  fsid      String         @id @default(uuid())
  ownerId   String
  projectId String?
  files     VirtualFiles[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  owner   User      @relation(fields: [ownerId], references: [id])
  project Projects? @relation(fields: [projectId], references: [pid])

  @@map("file_systems")
}

// 项目表
model Projects {
  pid        String   @id @default(uuid())
  // 是否为作答模板
  isTemplate Boolean  @default(false)
  name       String
  ownerId    String
  problemId  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  owner      User          @relation(fields: [ownerId], references: [id])
  problem    Problems      @relation(fields: [problemId], references: [pid], onDelete: Cascade)
  FileSystem FileSystems[]

  @@index([ownerId, problemId])
  @@map("projects")
}

// 虚拟文件表
model VirtualFiles {
  vid       String   @id @default(uuid())
  path      String
  content   String
  ownerId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner          User         @relation(fields: [ownerId], references: [id])
  FileSystem     FileSystems? @relation(fields: [fileSystemFsid], references: [fsid], onDelete: Cascade)
  fileSystemFsid String?

  @@index([ownerId])
  @@map("virtual_files")
}

// 影子文件表，判题产生的文件
model ShadowFile {
  sfid          String         @id @default(uuid())
  type          ShadowFileType
  judgeRecordId Int
  imageId       String?
  text          String?
  jsonb         Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  judgeRecord JudgeRecords @relation(fields: [judgeRecordId], references: [id], onDelete: Cascade)
  image       Image?       @relation(fields: [imageId], references: [id])

  @@map("shadow_files")
}

enum ShadowFileType {
  image
  text
}

model DailyProblem {
  id        Int      @id @default(autoincrement())
  date      DateTime @unique
  problemId Int      @unique
  createdAt DateTime @default(now())

  problem Problems @relation(fields: [problemId], references: [pid], onDelete: Cascade)

  @@map("daily_problems")
}

model DailyCheckin {
  id        Int      @id @default(autoincrement())
  userId    String
  date      DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, date])
  @@map("daily_checkins")
}
